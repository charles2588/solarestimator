{"ast":null,"code":"import { transformer } from './Battery';\nconst getEstimation = (battery, noOfBatteries) => {\n  {/* show the price, land dimension required and the sites energy density */}\n  let noOfTransformers = getTotalTransformers(noOfBatteries);\n  let landHeight = battery.batteryFloorHeight * noOfBatteries + transformer.floor_height * noOfTransformers;\n  let landWidth = battery.batteryFloorWidth * noOfBatteries + transformer.floor_width * noOfTransformers;\n  let siteEnergy = battery.batteryEnergy * noOfBatteries - transformer.energy * noOfTransformers;\n  let price = battery.batteryCost * noOfBatteries + transformer.cost * noOfTransformers;\n  if (landWidth > 100) {\n    return {\n      price: 0,\n      landHeight: 0,\n      landWidth: 0,\n      siteEnergy: 0,\n      noOfTransformers: 0\n    };\n  }\n  return {\n    price: price,\n    landHeight: landHeight,\n    landWidth: landWidth,\n    siteEnergy: siteEnergy,\n    noOfTransformers: noOfTransformers\n  };\n};\nconst getTotalTransformers = noOfBatteries => {\n  //- Assume that for every 4 industrial batteries bought 1 transformer is needed\n  // so if we get 3.5 then we consider we will need 4 transformers\n  return Math.ceil(noOfBatteries / 4);\n};\nexport default getEstimation;","map":{"version":3,"names":["transformer","getEstimation","battery","noOfBatteries","noOfTransformers","getTotalTransformers","landHeight","batteryFloorHeight","floor_height","landWidth","batteryFloorWidth","floor_width","siteEnergy","batteryEnergy","energy","price","batteryCost","cost","Math","ceil"],"sources":["/Users/charlesgomes/Documents/Charles/Work/interview/Tesla/TakeHome/solarestimator/src/util/PanelCalculator.js"],"sourcesContent":["import {transformer} from './Battery';\nconst getEstimation = (battery, noOfBatteries) => {\n    {/* show the price, land dimension required and the sites energy density */ }\n    let noOfTransformers = getTotalTransformers(noOfBatteries);\n    let landHeight = battery.batteryFloorHeight * noOfBatteries + (transformer.floor_height * noOfTransformers);\n    let landWidth = battery.batteryFloorWidth * noOfBatteries + (transformer.floor_width * noOfTransformers);\n    let siteEnergy = battery.batteryEnergy * noOfBatteries - transformer.energy * noOfTransformers;\n    let price = battery.batteryCost * noOfBatteries + transformer.cost * noOfTransformers;\n\n    if(landWidth > 100){\n        return ({\n            price: 0,\n            landHeight: 0,\n            landWidth: 0,\n            siteEnergy: 0,\n            noOfTransformers: 0,\n        })\n    }\n\n    return ({\n        price: price,\n        landHeight: landHeight,\n        landWidth: landWidth,\n        siteEnergy: siteEnergy,\n        noOfTransformers: noOfTransformers,\n    });\n}\n\nconst getTotalTransformers = (noOfBatteries) => {\n    //- Assume that for every 4 industrial batteries bought 1 transformer is needed\n    // so if we get 3.5 then we consider we will need 4 transformers\n    return Math.ceil(noOfBatteries / 4);\n}\nexport default getEstimation;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,WAAW;AACrC,MAAMC,aAAa,GAAGA,CAACC,OAAO,EAAEC,aAAa,KAAK;EAC9C,CAAC;EACD,IAAIC,gBAAgB,GAAGC,oBAAoB,CAACF,aAAa,CAAC;EAC1D,IAAIG,UAAU,GAAGJ,OAAO,CAACK,kBAAkB,GAAGJ,aAAa,GAAIH,WAAW,CAACQ,YAAY,GAAGJ,gBAAiB;EAC3G,IAAIK,SAAS,GAAGP,OAAO,CAACQ,iBAAiB,GAAGP,aAAa,GAAIH,WAAW,CAACW,WAAW,GAAGP,gBAAiB;EACxG,IAAIQ,UAAU,GAAGV,OAAO,CAACW,aAAa,GAAGV,aAAa,GAAGH,WAAW,CAACc,MAAM,GAAGV,gBAAgB;EAC9F,IAAIW,KAAK,GAAGb,OAAO,CAACc,WAAW,GAAGb,aAAa,GAAGH,WAAW,CAACiB,IAAI,GAAGb,gBAAgB;EAErF,IAAGK,SAAS,GAAG,GAAG,EAAC;IACf,OAAQ;MACJM,KAAK,EAAE,CAAC;MACRT,UAAU,EAAE,CAAC;MACbG,SAAS,EAAE,CAAC;MACZG,UAAU,EAAE,CAAC;MACbR,gBAAgB,EAAE;IACtB,CAAC;EACL;EAEA,OAAQ;IACJW,KAAK,EAAEA,KAAK;IACZT,UAAU,EAAEA,UAAU;IACtBG,SAAS,EAAEA,SAAS;IACpBG,UAAU,EAAEA,UAAU;IACtBR,gBAAgB,EAAEA;EACtB,CAAC;AACL,CAAC;AAED,MAAMC,oBAAoB,GAAIF,aAAa,IAAK;EAC5C;EACA;EACA,OAAOe,IAAI,CAACC,IAAI,CAAChB,aAAa,GAAG,CAAC,CAAC;AACvC,CAAC;AACD,eAAeF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}