{"ast":null,"code":"const getEstimation = (battery, noOfBatteries) => {\n  let total = 0;\n  {/* show the price, land dimension required and the sites energy density */}\n  let price = battery.batteryCost * noOfBatteries;\n  let landHeight = battery.batteryFloorHeight * noOfBatteries;\n  let landWidth = battery.batteryFloorWidth * noOfBatteries;\n  let siteEnergy = battery.batteryEnergy * noOfBatteries;\n  let noOfTransformers = getTotalTransformers(noOfBatteries);\n  return {\n    price: price,\n    landHeight: landHeight,\n    landWidth: landWidth,\n    siteEnergy: siteEnergy,\n    noOfTransformers: noOfTransformers\n  };\n};\nconst getTotalTransformers = noOfBatteries => {\n  //- Assume that for every 4 industrial batteries bought 1 transformer is needed.\n  return Math.ceil(noOfBatteries / 4);\n};\nexport default getEstimation;","map":{"version":3,"names":["getEstimation","battery","noOfBatteries","total","price","batteryCost","landHeight","batteryFloorHeight","landWidth","batteryFloorWidth","siteEnergy","batteryEnergy","noOfTransformers","getTotalTransformers","Math","ceil"],"sources":["/Users/charlesgomes/Documents/Charles/Work/interview/Tesla/TakeHome/solarestimator/src/util/PanelCalculator.js"],"sourcesContent":["const getEstimation = (battery, noOfBatteries) => {\n    let total = 0;\n    {/* show the price, land dimension required and the sites energy density */ }\n    let price = battery.batteryCost * noOfBatteries;\n    let landHeight = battery.batteryFloorHeight * noOfBatteries;\n    let landWidth = battery.batteryFloorWidth * noOfBatteries;\n    let siteEnergy = battery.batteryEnergy * noOfBatteries;\n    let noOfTransformers = getTotalTransformers(noOfBatteries);\n    return ({\n        price: price,\n        landHeight: landHeight,\n        landWidth: landWidth,\n        siteEnergy: siteEnergy,\n        noOfTransformers: noOfTransformers,\n    });\n}\n\nconst getTotalTransformers = (noOfBatteries) => {\n    //- Assume that for every 4 industrial batteries bought 1 transformer is needed.\n    return Math.ceil(noOfBatteries / 4);\n}\nexport default getEstimation;"],"mappings":"AAAA,MAAMA,aAAa,GAAGA,CAACC,OAAO,EAAEC,aAAa,KAAK;EAC9C,IAAIC,KAAK,GAAG,CAAC;EACb,CAAC;EACD,IAAIC,KAAK,GAAGH,OAAO,CAACI,WAAW,GAAGH,aAAa;EAC/C,IAAII,UAAU,GAAGL,OAAO,CAACM,kBAAkB,GAAGL,aAAa;EAC3D,IAAIM,SAAS,GAAGP,OAAO,CAACQ,iBAAiB,GAAGP,aAAa;EACzD,IAAIQ,UAAU,GAAGT,OAAO,CAACU,aAAa,GAAGT,aAAa;EACtD,IAAIU,gBAAgB,GAAGC,oBAAoB,CAACX,aAAa,CAAC;EAC1D,OAAQ;IACJE,KAAK,EAAEA,KAAK;IACZE,UAAU,EAAEA,UAAU;IACtBE,SAAS,EAAEA,SAAS;IACpBE,UAAU,EAAEA,UAAU;IACtBE,gBAAgB,EAAEA;EACtB,CAAC;AACL,CAAC;AAED,MAAMC,oBAAoB,GAAIX,aAAa,IAAK;EAC5C;EACA,OAAOY,IAAI,CAACC,IAAI,CAACb,aAAa,GAAG,CAAC,CAAC;AACvC,CAAC;AACD,eAAeF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}